import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('HousingData.csv')

df

df.shape

df.info()

df.dtypes

df.describe()

df.isnull().sum()

columns = ['CRIM','ZN','INDUS','AGE','LSTAT']
for column in columns:
    df.fillna(df[column].mean(),axis = 0,inplace = True)
    
df['CHAS'].fillna(0,inplace = True)

df.isnull().sum()

fig, ax = plt.subplots(2, 7, figsize=(20, 10))
idx = 0
ax = ax.flatten()

for col, value in df.items():
    sns.boxplot(y=col, data=df, ax=ax[idx])
    idx += 1
plt.tight_layout(pad=0.5, w_pad=0.7, h_pad=5.0)

for column, val in df.items():
        q1 = val.quantile(0.25)
        q3 = val.quantile(0.75)
        iqr = q3 - q1
        v_col = val[(val <= q1 - 1.5 * iqr) | (val >= q3 + 1.5 * iqr)]
        perc = np.shape(v_col)[0] * 100.0 / np.shape(df)[0]
        print("Column %s outliers = %.2f%%" % (column, perc))

fig, ax = plt.subplots(2, 7, figsize=(20, 10))
idx = 0
ax = ax.flatten()

for col, value in df.items():
    sns.distplot(value, ax=ax[idx])
    idx += 1
plt.tight_layout(pad=0.5, w_pad=0.7, h_pad=5.0)

cols = ['CRIM','ZN','TAX','B']
for col in cols:
    minimum = min(df[col])
    maximum = max(df[col])
    df[col] = (df[col] - minimum) / (maximum-minimum)

fig, ax = plt.subplots(2, 7, figsize=(20, 10))
idx = 0
ax = ax.flatten()

for col, value in df.items():
    sns.distplot(value, ax=ax[idx])
    idx += 1
plt.tight_layout(pad=0.5, w_pad=0.7, h_pad=5.0)

from sklearn import preprocessing
scalar = preprocessing.StandardScaler()

scaled_cols = scalar.fit_transform(df[cols])
scaled_cols = pd.DataFrame(scaled_cols,columns = cols)
scaled_cols.head()

for col in cols:
    df[col] = scaled_cols[col]

fig, ax = plt.subplots(2, 7, figsize=(20, 10))
idx = 0
ax = ax.flatten()

for col, value in df.items():
    sns.distplot(value, ax=ax[idx])
    idx += 1
plt.tight_layout(pad=0.5, w_pad=0.7, h_pad=5.0)

fig, ax = plt.subplots(2, 7, figsize=(20, 10))
idx = 0
ax = ax.flatten()

for col, value in df.items():
    sns.distplot(value, ax=ax[idx])
    idx += 1
plt.tight_layout(pad=0.5, w_pad=0.7, h_pad=5.0)

plt.figure(figsize=(20,10))
sns.regplot(y = df['MEDV'],x = df['LSTAT'])

plt.figure(figsize=(20,10))
sns.regplot(y = df['MEDV'],x = df['LSTAT'])

plt.figure(figsize=(20,10))
sns.regplot(y = df['MEDV'],x = df['LSTAT'])

from sklearn.model_selection import cross_val_score,train_test_split
from sklearn.metrics import mean_squared_error

def train(model,X,y):
    x_train,x_test,y_train,y_test = train_test_split(X,y,random_state = 42)
    model.fit(x_train,y_train)
    
    pred = model.predict(x_test)
    
    cv_score = cross_val_score(model,X,y,scoring = 'neg_mean_squared_error',cv = 5)
    cv_score = np.abs(np.mean(cv_score))
    
    print("Model Report")
    print("MSE : ",mean_squared_error(y_test,pred))
    print("CV Score : ",cv_score)

from sklearn.linear_model import LinearRegression
plt.figure(figsize=(10,5))
model = LinearRegression()
train(model,X,y)
coef = pd.Series(model.coef_,X.columns).sort_values()
coef.plot(kind = 'bar',title = 'Model Coefficients')